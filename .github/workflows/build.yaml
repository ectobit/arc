name: build

on:
  push:
  pull_request:

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Set up go
        uses: actions/setup-go@v3
        with:
          go-version: 1.18.0
      - name: Set up cache
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Set up linters
        run: |
          curl -sSL -o /usr/local/bin/nancy https://github.com/sonatype-nexus-community/nancy/releases/download/v1.0.33/nancy-v1.0.33-linux-amd64 && chmod 755 /usr/local/bin/nancy
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.45.2
      - name: Check out
        uses: actions/checkout@v3
      - name: Lint
        run: |
          go list -json -m all | nancy sleuth
          make lint
      - name: Lint Dockerfile
        uses: hadolint/hadolint-action@v2.1.0
        with:
          dockerfile: Dockerfile
          ignore: DL3018
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Set up go
        uses: actions/setup-go@v3
        with:
          go-version: 1.18.0
      - name: Set up cache
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Check out
        uses: actions/checkout@v3
      - name: Test
        run: make test
  build:
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Check out
        uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2.0.0
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Set up tags
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ectobit/arc
          labels: |
            org.opencontainers.image.licenses=BSD-2-Clause-Patent
            org.opencontainers.image.vendor=ectobit.com
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=edge
            type=sha
      - name: Set up linker flags
        id: flags
        run: |
          if  [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION=${GITHUB_SHA::8}
          fi
          BUILD_DATE=$(date -u '+%Y-%m-%dT%H:%M:%SZ')
          LD_FLAGS="-s -w -extldflags '-static' -X main.version=${VERSION} -X main.revision=${GITHUB_SHA} -X main.buildDate=${BUILD_DATE}"
          echo ::set-output name=flags::${LD_FLAGS}
      - name: Login to container registry
        uses: docker/login-action@v2.0.0
        with:
          username: ${{ secrets.CONTAINER_REGISTRY_USERNAME }}
          password: ${{ secrets.CONTAINER_REGISTRY_PASSWORD }}
      - name: Build and push image to container registry
        uses: docker/build-push-action@v3.0.0
        with:
          build-args: LD_FLAGS=${{ steps.flags.outputs.flags }}
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
